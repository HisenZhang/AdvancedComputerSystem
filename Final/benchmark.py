import numpy as np
from scipy import signal 
import time
import sys

taps = [
    -0.03926588615294601,
    -0.05553547436862413,
    -0.07674634732792313,
    -0.10359512127942656,
    -0.13653763745381112,
    -0.17563154711765214,
    -0.22037129189056356,
    -0.26953979617440665,
    -0.32110731416014476,
    -0.37220987669580885,
    -0.41923575145442643,
    -0.45803722114653117,
    -0.48426719093924325,
    -0.493817805141109  ,
    -0.483315193354812  ,
    -0.4506055551298345 ,
    -0.39515794257351333,
    -0.31831200150042305,
    -0.22331589501120253,
    -0.11512890376975546,
    0.0                 ,
    0.11512890376975546 ,
    0.22331589501120253 ,
    0.31831200150042305 ,
    0.39515794257351333 ,
    0.4506055551298345  ,
    0.483315193354812   ,
    0.493817805141109   ,
    0.48426719093924325 ,
    0.45803722114653117 ,
    0.41923575145442643 ,
    0.37220987669580885 ,
    0.32110731416014476 ,
    0.26953979617440665 ,
    0.22037129189056356 ,
    0.17563154711765214 ,
    0.13653763745381112 ,
    0.10359512127942656 ,
    0.07674634732792313 ,
    0.05553547436862413
]

fs = 44100
duration = int(sys.argv[1])
f = 440

samples = (np.sin(2 * np.pi * np.arange(fs * duration) * f / fs)).astype(np.float32)

start = time.perf_counter()
np.convolve(samples,taps, mode='full')
end = time.perf_counter()
print('numpy.convolve',round((end-start)*1000),'ms')

start = time.perf_counter()
signal.convolve(samples,taps, mode='full')
end = time.perf_counter()
print('scipy.signal.convolve',round((end-start)*1000),'ms')
